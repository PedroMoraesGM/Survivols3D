// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public unsafe partial class Frame {
    public unsafe partial struct FrameEvents {
      static partial void GetEventTypeCountCodeGen(ref Int32 eventCount) {
        eventCount = 12;
      }
      static partial void GetParentEventIDCodeGen(Int32 eventID, ref Int32 parentEventID) {
        switch (eventID) {
          default: break;
        }
      }
      static partial void GetEventTypeCodeGen(Int32 eventID, ref System.Type result) {
        switch (eventID) {
          case EventOnGameStateChanged.ID: result = typeof(EventOnGameStateChanged); return;
          case EventOnScoreChanged.ID: result = typeof(EventOnScoreChanged); return;
          case EventOnGameTerminated.ID: result = typeof(EventOnGameTerminated); return;
          case EventOnGameOver.ID: result = typeof(EventOnGameOver); return;
          case EventOnRequestDisconnect.ID: result = typeof(EventOnRequestDisconnect); return;
          case EventOnHit.ID: result = typeof(EventOnHit); return;
          case EventOnDefeated.ID: result = typeof(EventOnDefeated); return;
          case EventOnChooseUpgrades.ID: result = typeof(EventOnChooseUpgrades); return;
          case EventOnHasChoosenUpgrades.ID: result = typeof(EventOnHasChoosenUpgrades); return;
          case EventOnXpAdquired.ID: result = typeof(EventOnXpAdquired); return;
          case EventOnLevelUp.ID: result = typeof(EventOnLevelUp); return;
          default: break;
        }
      }
      public EventOnGameStateChanged OnGameStateChanged(GameState state) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnGameStateChanged>(EventOnGameStateChanged.ID);
        ev.state = state;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnScoreChanged OnScoreChanged(Int32 playerIndex, Int32 score) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnScoreChanged>(EventOnScoreChanged.ID);
        ev.playerIndex = playerIndex;
        ev.score = score;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGameTerminated OnGameTerminated() {
        var ev = _f.Context.AcquireEvent<EventOnGameTerminated>(EventOnGameTerminated.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGameOver OnGameOver() {
        var ev = _f.Context.AcquireEvent<EventOnGameOver>(EventOnGameOver.ID);
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnRequestDisconnect OnRequestDisconnect(EntityRef Entity) {
        var ev = _f.Context.AcquireEvent<EventOnRequestDisconnect>(EventOnRequestDisconnect.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHit OnHit(EntityRef Target, EntityRef Dealer, FP Damage) {
        var ev = _f.Context.AcquireEvent<EventOnHit>(EventOnHit.ID);
        ev.Target = Target;
        ev.Dealer = Dealer;
        ev.Damage = Damage;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnDefeated OnDefeated(EntityRef Target, EntityRef Dealer) {
        var ev = _f.Context.AcquireEvent<EventOnDefeated>(EventOnDefeated.ID);
        ev.Target = Target;
        ev.Dealer = Dealer;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnChooseUpgrades OnChooseUpgrades(EntityRef Target, QListPtr<UpgradeId> PendingChoices) {
        var ev = _f.Context.AcquireEvent<EventOnChooseUpgrades>(EventOnChooseUpgrades.ID);
        ev.Target = Target;
        ev.PendingChoices = PendingChoices;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHasChoosenUpgrades OnHasChoosenUpgrades(EntityRef Target, UpgradeId ChoosenId) {
        var ev = _f.Context.AcquireEvent<EventOnHasChoosenUpgrades>(EventOnHasChoosenUpgrades.ID);
        ev.Target = Target;
        ev.ChoosenId = ChoosenId;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnXpAdquired OnXpAdquired(EntityRef Target, FP XpAmount) {
        var ev = _f.Context.AcquireEvent<EventOnXpAdquired>(EventOnXpAdquired.ID);
        ev.Target = Target;
        ev.XpAmount = XpAmount;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLevelUp OnLevelUp(EntityRef Target, Int32 NewLevel) {
        var ev = _f.Context.AcquireEvent<EventOnLevelUp>(EventOnLevelUp.ID);
        ev.Target = Target;
        ev.NewLevel = NewLevel;
        _f.AddEvent(ev);
        return ev;
      }
    }
  }
  public unsafe partial class EventOnGameStateChanged : EventBase {
    public new const Int32 ID = 1;
    public GameState state;
    protected EventOnGameStateChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameStateChanged() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + state.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnScoreChanged : EventBase {
    public new const Int32 ID = 2;
    public Int32 playerIndex;
    public Int32 score;
    protected EventOnScoreChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnScoreChanged() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + playerIndex.GetHashCode();
        hash = hash * 31 + score.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGameTerminated : EventBase {
    public new const Int32 ID = 3;
    protected EventOnGameTerminated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameTerminated() : 
        base(3, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGameOver : EventBase {
    public new const Int32 ID = 4;
    protected EventOnGameOver(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameOver() : 
        base(4, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        return hash;
      }
    }
  }
  public unsafe partial class EventOnRequestDisconnect : EventBase {
    public new const Int32 ID = 5;
    public EntityRef Entity;
    protected EventOnRequestDisconnect(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnRequestDisconnect() : 
        base(5, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHit : EventBase {
    public new const Int32 ID = 6;
    public EntityRef Target;
    public EntityRef Dealer;
    public FP Damage;
    protected EventOnHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHit() : 
        base(6, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + Dealer.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnDefeated : EventBase {
    public new const Int32 ID = 7;
    public EntityRef Target;
    public EntityRef Dealer;
    protected EventOnDefeated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnDefeated() : 
        base(7, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + Dealer.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnChooseUpgrades : EventBase {
    public new const Int32 ID = 8;
    public EntityRef Target;
    public QListPtr<UpgradeId> PendingChoices;
    protected EventOnChooseUpgrades(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnChooseUpgrades() : 
        base(8, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + PendingChoices.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHasChoosenUpgrades : EventBase {
    public new const Int32 ID = 9;
    public EntityRef Target;
    public UpgradeId ChoosenId;
    protected EventOnHasChoosenUpgrades(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHasChoosenUpgrades() : 
        base(9, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + ChoosenId.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnXpAdquired : EventBase {
    public new const Int32 ID = 10;
    public EntityRef Target;
    public FP XpAmount;
    protected EventOnXpAdquired(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnXpAdquired() : 
        base(10, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + XpAmount.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLevelUp : EventBase {
    public new const Int32 ID = 11;
    public EntityRef Target;
    public Int32 NewLevel;
    protected EventOnLevelUp(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLevelUp() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + NewLevel.GetHashCode();
        return hash;
      }
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
