// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(System.Collections.Generic.KeyValuePair<EntityRef, FP>))]
  public unsafe class DictionaryEntry_EntityRef_FP : Quantum.Prototypes.DictionaryEntry {
    public MapEntityId Key;
    public FP Value;
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Ball))]
  public unsafe class BallPrototype : ComponentPrototype<Quantum.Ball> {
    public FPVector3 Velocity;
    public MapEntityId Paddle;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Ball component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Ball result, in PrototypeMaterializationContext context = default) {
        result.Velocity = this.Velocity;
        PrototypeValidator.FindMapEntity(this.Paddle, in context, out result.Paddle);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Character))]
  public unsafe partial class CharacterPrototype : ComponentPrototype<Quantum.Character> {
    public FP MaxHealth;
    public FP CurrentHealth;
    public QBoolean IsDead;
    public FP MoveSpeed;
    public FP HorizontalTurnSpeedDegrees;
    public FP VerticalTurnSpeedDegrees;
    public FP MaxVerticalLook;
    public FP MinVerticalLook;
    public FP MinHeightLimit;
    partial void MaterializeUser(Frame frame, ref Quantum.Character result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Character component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Character result, in PrototypeMaterializationContext context = default) {
        result.MaxHealth = this.MaxHealth;
        result.CurrentHealth = this.CurrentHealth;
        result.IsDead = this.IsDead;
        result.MoveSpeed = this.MoveSpeed;
        result.HorizontalTurnSpeedDegrees = this.HorizontalTurnSpeedDegrees;
        result.VerticalTurnSpeedDegrees = this.VerticalTurnSpeedDegrees;
        result.MaxVerticalLook = this.MaxVerticalLook;
        result.MinVerticalLook = this.MinVerticalLook;
        result.MinHeightLimit = this.MinHeightLimit;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyAI))]
  public unsafe partial class EnemyAIPrototype : ComponentPrototype<Quantum.EnemyAI> {
    public FP Health;
    public FP XpDrop;
    public FP Damage;
    public FP CloseDamageRange;
    public FP Speed;
    public FP MinHeightLimit;
    public QBoolean CanMove;
    partial void MaterializeUser(Frame frame, ref Quantum.EnemyAI result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemyAI component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemyAI result, in PrototypeMaterializationContext context = default) {
        result.Health = this.Health;
        result.XpDrop = this.XpDrop;
        result.Damage = this.Damage;
        result.CloseDamageRange = this.CloseDamageRange;
        result.Speed = this.Speed;
        result.MinHeightLimit = this.MinHeightLimit;
        result.CanMove = this.CanMove;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyInfo))]
  public unsafe class EnemyInfoPrototype : StructPrototype {
    public MapEntityId Entity;
    public FPVector3 Position;
    public void Materialize(Frame frame, ref Quantum.EnemyInfo result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
        result.Position = this.Position;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyRegistryComponent))]
  public unsafe class EnemyRegistryComponentPrototype : ComponentPrototype<Quantum.EnemyRegistryComponent> {
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.EnemyInfoPrototype[] ActiveEnemies = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemyRegistryComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemyRegistryComponent result, in PrototypeMaterializationContext context = default) {
        if (this.ActiveEnemies.Length == 0) {
          result.ActiveEnemies = default;
        } else {
          var list = frame.AllocateList(out result.ActiveEnemies, this.ActiveEnemies.Length);
          for (int i = 0; i < this.ActiveEnemies.Length; ++i) {
            Quantum.EnemyInfo tmp = default;
            this.ActiveEnemies[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemySpawnEntry))]
  public unsafe partial class EnemySpawnEntryPrototype : StructPrototype {
    public AssetRef<EntityPrototype> Prefab;
    public Int32 MinWave;
    public FP Weight;
    partial void MaterializeUser(Frame frame, ref Quantum.EnemySpawnEntry result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.EnemySpawnEntry result, in PrototypeMaterializationContext context = default) {
        result.Prefab = this.Prefab;
        result.MinWave = this.MinWave;
        result.Weight = this.Weight;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EnemyWaveComponent))]
  public unsafe partial class EnemyWaveComponentPrototype : ComponentPrototype<Quantum.EnemyWaveComponent> {
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.EnemySpawnEntryPrototype[] Entries = {};
    partial void MaterializeUser(Frame frame, ref Quantum.EnemyWaveComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.EnemyWaveComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.EnemyWaveComponent result, in PrototypeMaterializationContext context = default) {
        if (this.Entries.Length == 0) {
          result.Entries = default;
        } else {
          var list = frame.AllocateList(out result.Entries, this.Entries.Length);
          for (int i = 0; i < this.Entries.Length; ++i) {
            Quantum.EnemySpawnEntry tmp = default;
            this.Entries[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Game))]
  public unsafe partial class GamePrototype : ComponentPrototype<Quantum.Game> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.Game result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Game component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Game result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Goal))]
  public unsafe partial class GoalPrototype : ComponentPrototype<Quantum.Goal> {
    public Int32 Index;
    partial void MaterializeUser(Frame frame, ref Quantum.Goal result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Goal component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Goal result, in PrototypeMaterializationContext context = default) {
        result.Index = this.Index;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.HomingProjectileComponent))]
  public unsafe class HomingProjectileComponentPrototype : ComponentPrototype<Quantum.HomingProjectileComponent> {
    public Int32 RemainingBounces;
    public FP Speed;
    public FP HomingStrength;
    public QBoolean HasTarget;
    public QBoolean CanDragTarget;
    public QBoolean CanRepeatTarget;
    public MapEntityId CurrentTarget;
    public MapEntityId PreviousTarget;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.HomingProjectileComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.HomingProjectileComponent result, in PrototypeMaterializationContext context = default) {
        result.RemainingBounces = this.RemainingBounces;
        result.Speed = this.Speed;
        result.HomingStrength = this.HomingStrength;
        result.HasTarget = this.HasTarget;
        result.CanDragTarget = this.CanDragTarget;
        result.CanRepeatTarget = this.CanRepeatTarget;
        PrototypeValidator.FindMapEntity(this.CurrentTarget, in context, out result.CurrentTarget);
        PrototypeValidator.FindMapEntity(this.PreviousTarget, in context, out result.PreviousTarget);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public FPVector2 MoveAxis;
    public FPVector2 LookDelta;
    public Button Forward;
    public Button Reset;
    public Button ChoiceFirst;
    public Button ChoiceSecond;
    public Button ChoiceThird;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.MoveAxis = this.MoveAxis;
        result.LookDelta = this.LookDelta;
        result.Forward = this.Forward;
        result.Reset = this.Reset;
        result.ChoiceFirst = this.ChoiceFirst;
        result.ChoiceSecond = this.ChoiceSecond;
        result.ChoiceThird = this.ChoiceThird;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.OwnerData))]
  public unsafe class OwnerDataPrototype : ComponentPrototype<Quantum.OwnerData> {
    public MapEntityId OwnerEntity;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.OwnerData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.OwnerData result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.OwnerEntity, in context, out result.OwnerEntity);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerInfo))]
  public unsafe class PlayerInfoPrototype : StructPrototype {
    public MapEntityId Entity;
    public FPVector3 Position;
    public void Materialize(Frame frame, ref Quantum.PlayerInfo result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
        result.Position = this.Position;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe partial class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerRegistryComponent))]
  public unsafe class PlayerRegistryComponentPrototype : ComponentPrototype<Quantum.PlayerRegistryComponent> {
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.PlayerInfoPrototype[] ActivePlayers = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerRegistryComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerRegistryComponent result, in PrototypeMaterializationContext context = default) {
        if (this.ActivePlayers.Length == 0) {
          result.ActivePlayers = default;
        } else {
          var list = frame.AllocateList(out result.ActivePlayers, this.ActivePlayers.Length);
          for (int i = 0; i < this.ActivePlayers.Length; ++i) {
            Quantum.PlayerInfo tmp = default;
            this.ActivePlayers[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerUpgradeComponent))]
  public unsafe partial class PlayerUpgradeComponentPrototype : ComponentPrototype<Quantum.PlayerUpgradeComponent> {
    [DynamicCollectionAttribute()]
    public Int32[] AcquiredUpgrades = {};
    public QBoolean WaitingForChoice;
    [AllocateOnComponentAdded()]
    [DynamicCollectionAttribute()]
    public Int32[] PendingChoices = {};
    public Int32 ChosenUpgradeId;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerUpgradeComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerUpgradeComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerUpgradeComponent result, in PrototypeMaterializationContext context = default) {
        if (this.AcquiredUpgrades.Length == 0) {
          result.AcquiredUpgrades = default;
        } else {
          var list = frame.AllocateList(out result.AcquiredUpgrades, this.AcquiredUpgrades.Length);
          for (int i = 0; i < this.AcquiredUpgrades.Length; ++i) {
            Int32 tmp = default;
            tmp = this.AcquiredUpgrades[i];
            list.Add(tmp);
          }
        }
        result.WaitingForChoice = this.WaitingForChoice;
        if (this.PendingChoices.Length == 0) {
          result.PendingChoices = default;
        } else {
          var list = frame.AllocateList(out result.PendingChoices, this.PendingChoices.Length);
          for (int i = 0; i < this.PendingChoices.Length; ++i) {
            Int32 tmp = default;
            tmp = this.PendingChoices[i];
            list.Add(tmp);
          }
        }
        result.ChosenUpgradeId = this.ChosenUpgradeId;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ProgressionComponent))]
  public unsafe partial class ProgressionComponentPrototype : ComponentPrototype<Quantum.ProgressionComponent> {
    public Int32 Cycle;
    public FP TimeElapsed;
    public FP CycleDuration;
    partial void MaterializeUser(Frame frame, ref Quantum.ProgressionComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ProgressionComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ProgressionComponent result, in PrototypeMaterializationContext context = default) {
        result.Cycle = this.Cycle;
        result.TimeElapsed = this.TimeElapsed;
        result.CycleDuration = this.CycleDuration;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Projectile))]
  public unsafe class ProjectilePrototype : ComponentPrototype<Quantum.Projectile> {
    public MapEntityId Owner;
    public FP Damage;
    public Int32 HitsToDestroy;
    public FP Velocity;
    public FP Elapsed;
    public FP TimeToLive;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Projectile component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Projectile result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Damage = this.Damage;
        result.HitsToDestroy = this.HitsToDestroy;
        result.Velocity = this.Velocity;
        result.Elapsed = this.Elapsed;
        result.TimeToLive = this.TimeToLive;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ShootingWeaponComponent))]
  public unsafe partial class ShootingWeaponComponentPrototype : ComponentPrototype<Quantum.ShootingWeaponComponent> {
    public AssetRef<EntityPrototype> ProjectilePrefab;
    public Int32 FireCooldown;
    public Int32 FireCdTicks;
    public FP MuzzleOffset;
    partial void MaterializeUser(Frame frame, ref Quantum.ShootingWeaponComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ShootingWeaponComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ShootingWeaponComponent result, in PrototypeMaterializationContext context = default) {
        result.ProjectilePrefab = this.ProjectilePrefab;
        result.FireCooldown = this.FireCooldown;
        result.FireCdTicks = this.FireCdTicks;
        result.MuzzleOffset = this.MuzzleOffset;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SpawnSettings))]
  public unsafe partial class SpawnSettingsPrototype : StructPrototype {
    public AssetRef<EntityPrototype> EnemyPrefab;
    public FP BaseInterval;
    public Int32 BaseBatchSize;
    public FP BaseHP;
    public FP BaseDamage;
    partial void MaterializeUser(Frame frame, ref Quantum.SpawnSettings result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.SpawnSettings result, in PrototypeMaterializationContext context = default) {
        result.EnemyPrefab = this.EnemyPrefab;
        result.BaseInterval = this.BaseInterval;
        result.BaseBatchSize = this.BaseBatchSize;
        result.BaseHP = this.BaseHP;
        result.BaseDamage = this.BaseDamage;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SpawnerComponent))]
  public unsafe partial class SpawnerComponentPrototype : ComponentPrototype<Quantum.SpawnerComponent> {
    public FP TimeSinceLastSpawn;
    public FP CurrentInterval;
    public Int32 CurrentBatchSize;
    public FP HPMultiplier;
    public FP DamageMultiplier;
    public FP SpawnRadius;
    public Quantum.Prototypes.SpawnSettingsPrototype Settings;
    partial void MaterializeUser(Frame frame, ref Quantum.SpawnerComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.SpawnerComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.SpawnerComponent result, in PrototypeMaterializationContext context = default) {
        result.TimeSinceLastSpawn = this.TimeSinceLastSpawn;
        result.CurrentInterval = this.CurrentInterval;
        result.CurrentBatchSize = this.CurrentBatchSize;
        result.HPMultiplier = this.HPMultiplier;
        result.DamageMultiplier = this.DamageMultiplier;
        result.SpawnRadius = this.SpawnRadius;
        this.Settings.Materialize(frame, ref result.Settings, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Timer))]
  public unsafe partial class TimerPrototype : StructPrototype {
    public FP TotalTime;
    public FP TimeLeft;
    partial void MaterializeUser(Frame frame, ref Quantum.Timer result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Timer result, in PrototypeMaterializationContext context = default) {
        result.TotalTime = this.TotalTime;
        result.TimeLeft = this.TimeLeft;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.UpgradeDataComponent))]
  public unsafe partial class UpgradeDataComponentPrototype : ComponentPrototype<Quantum.UpgradeDataComponent> {
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.UpgradeEntryPrototype[] Entries = {};
    public Int32 ChoicesPerLevel;
    partial void MaterializeUser(Frame frame, ref Quantum.UpgradeDataComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.UpgradeDataComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.UpgradeDataComponent result, in PrototypeMaterializationContext context = default) {
        if (this.Entries.Length == 0) {
          result.Entries = default;
        } else {
          var list = frame.AllocateList(out result.Entries, this.Entries.Length);
          for (int i = 0; i < this.Entries.Length; ++i) {
            Quantum.UpgradeEntry tmp = default;
            this.Entries[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        result.ChoicesPerLevel = this.ChoicesPerLevel;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.UpgradeEntry))]
  public unsafe partial class UpgradeEntryPrototype : StructPrototype {
    public AssetRef<EntityPrototype> Prefab;
    public Int32 Id;
    public Int32 MinLevel;
    public Int32 Weight;
    public QBoolean CanBeRepeated;
    partial void MaterializeUser(Frame frame, ref Quantum.UpgradeEntry result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.UpgradeEntry result, in PrototypeMaterializationContext context = default) {
        result.Prefab = this.Prefab;
        result.Id = this.Id;
        result.MinLevel = this.MinLevel;
        result.Weight = this.Weight;
        result.CanBeRepeated = this.CanBeRepeated;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Wall))]
  public unsafe partial class WallPrototype : ComponentPrototype<Quantum.Wall> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.Wall result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Wall component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Wall result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.XPComponent))]
  public unsafe partial class XPComponentPrototype : ComponentPrototype<Quantum.XPComponent> {
    public AssetRef<EntityPrototype> XpPrefab;
    public FP TotalXP;
    public FP CurrentXP;
    public Int32 Level;
    public FP Growth;
    partial void MaterializeUser(Frame frame, ref Quantum.XPComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.XPComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.XPComponent result, in PrototypeMaterializationContext context = default) {
        result.XpPrefab = this.XpPrefab;
        result.TotalXP = this.TotalXP;
        result.CurrentXP = this.CurrentXP;
        result.Level = this.Level;
        result.Growth = this.Growth;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.XPPickup))]
  public unsafe partial class XPPickupPrototype : ComponentPrototype<Quantum.XPPickup> {
    public FP Value;
    partial void MaterializeUser(Frame frame, ref Quantum.XPPickup result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.XPPickup component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.XPPickup result, in PrototypeMaterializationContext context = default) {
        result.Value = this.Value;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
